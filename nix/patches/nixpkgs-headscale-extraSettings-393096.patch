From cc3bfb0191c7db15ca6a872dd9fd1452652fa398 Mon Sep 17 00:00:00 2001
From: oliverwiegers <oliver.wiegers@netlogix.de>
Date: Tue, 25 Mar 2025 15:24:46 +0100
Subject: [PATCH] nixos/headscale: Add extraSettings option

`extraSettings` adds the possibility to headscale config options that
don't have a nixos module option exposed.
---
 .../modules/services/networking/headscale.nix | 12 ++++++++++-
 nixos/tests/headscale.nix                     | 20 +++++++++++++++++++
 2 files changed, 31 insertions(+), 1 deletion(-)

diff --git a/nixos/modules/services/networking/headscale.nix b/nixos/modules/services/networking/headscale.nix
index 33336ebdd11992..00dade98dc60f8 100644
--- a/nixos/modules/services/networking/headscale.nix
+++ b/nixos/modules/services/networking/headscale.nix
@@ -18,8 +18,9 @@ let
     unix_socket = "${runDir}/headscale.sock";
   };

+  configOptions = lib.recursiveUpdate cfg.settings cfg.extraSettings;
   settingsFormat = pkgs.formats.yaml { };
-  configFile = settingsFormat.generate "headscale.yaml" cfg.settings;
+  configFile = settingsFormat.generate "headscale.yaml" configOptions;
   cliConfigFile = settingsFormat.generate "headscale.yaml" cliConfig;

   assertRemovedOption = option: message: {
@@ -479,6 +480,15 @@ in
           };
         };
       };
+
+      extraSettings = lib.mkOption {
+        default = { };
+        type = lib.types.attrsOf lib.types.anything;
+        description = ''
+          Extra configuration options which are serialized to yaml and added
+          to the headscale.yaml file.
+        '';
+      };
     };
   };

diff --git a/nixos/tests/headscale.nix b/nixos/tests/headscale.nix
index a4368838e87ad5..6f0504c62ef465 100644
--- a/nixos/tests/headscale.nix
+++ b/nixos/tests/headscale.nix
@@ -48,6 +48,15 @@ in
                 override_local_dns = false;
               };
             };
+            extraSettings = {
+              dns.extra_records = [
+                {
+                  name = "grafana.myvpn.example.com";
+                  type = "A";
+                  value = "100.64.0.3";
+                }
+              ];
+            };
           };
           nginx = {
             enable = true;
@@ -73,7 +82,13 @@ in
       };
     };

+  # Type checking on extra packages doesn't work yet
+  skipTypeCheck = true;
+  extraPythonPackages = p: [ p.pyyaml ];
+
   testScript = ''
+    import yaml
+
     start_all()
     headscale.wait_for_unit("headscale")
     headscale.wait_for_open_port(443)
@@ -90,5 +105,10 @@ in
     # Check that they are reachable from the tailnet
     peer1.wait_until_succeeds("tailscale ping peer2")
     peer2.wait_until_succeeds("tailscale ping peer1.tailnet")
+
+    with open("/etc/headscale/config.yaml", encoding="utf-8") as config:
+        config_dict = yaml.safe_load(config)
+        assert "extra_records" in config_dict["dns"].keys(), "Config file does not contain settings from services.headscale.extraSettings."
+        assert config_dict["dns"]["extra_records"][0]["name"] == "grafana.myvpn.example.com", "Extra record has wrong name or does not exist."
   '';
 }
